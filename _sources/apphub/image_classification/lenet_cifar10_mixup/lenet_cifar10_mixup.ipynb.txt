{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# CIFAR10 Image Classification Using LeNet"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this tutorial, we are going to walk through the logic in `lenet_cifar10_mixup.py` shown below and provide step-by-step instructions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "# Copyright 2019 The FastEstimator Authors. All Rights Reserved.\n",
      "#\n",
      "# Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      "# you may not use this file except in compliance with the License.\n",
      "# You may obtain a copy of the License at\n",
      "#\n",
      "#     http://www.apache.org/licenses/LICENSE-2.0\n",
      "#\n",
      "# Unless required by applicable law or agreed to in writing, software\n",
      "# distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      "# See the License for the specific language governing permissions and\n",
      "# limitations under the License.\n",
      "# ==============================================================================\n",
      "import tempfile\n",
      "\n",
      "import tensorflow as tf\n",
      "from tensorflow.python.keras.losses import SparseCategoricalCrossentropy as KerasCrossentropy\n",
      "\n",
      "import fastestimator as fe\n",
      "from fastestimator.architecture import LeNet\n",
      "from fastestimator.estimator.trace import Accuracy, ConfusionMatrix, ModelSaver\n",
      "from fastestimator.network.loss import MixUpLoss, SparseCategoricalCrossentropy\n",
      "from fastestimator.network.model import FEModel, ModelOp\n",
      "from fastestimator.pipeline.augmentation import MixUpBatch\n",
      "from fastestimator.pipeline.processing import Minmax\n",
      "from fastestimator.util.schedule import Scheduler\n",
      "\n",
      "\n",
      "def get_estimator(epochs=10, batch_size=32, alpha=1.0, warmup=0, model_dir=tempfile.mkdtemp()):\n",
      "    (x_train, y_train), (x_eval, y_eval) = tf.keras.datasets.cifar10.load_data()\n",
      "    data = {\"train\": {\"x\": x_train, \"y\": y_train}, \"eval\": {\"x\": x_eval, \"y\": y_eval}}\n",
      "    num_classes = 10\n",
      "    pipeline = fe.Pipeline(batch_size=batch_size, data=data, ops=Minmax(inputs=\"x\", outputs=\"x\"))\n",
      "\n",
      "    model = FEModel(model_def=lambda: LeNet(input_shape=x_train.shape[1:], classes=num_classes),\n",
      "                    model_name=\"LeNet\",\n",
      "                    optimizer=\"adam\")\n",
      "\n",
      "    mixup_map = {warmup: MixUpBatch(inputs=\"x\", outputs=[\"x\", \"lambda\"], alpha=alpha, mode=\"train\")}\n",
      "    mixup_loss = {\n",
      "        0: SparseCategoricalCrossentropy(y_true=\"y\", y_pred=\"y_pred\", mode=\"train\"),\n",
      "        warmup: MixUpLoss(KerasCrossentropy(), lam=\"lambda\", y_true=\"y\", y_pred=\"y_pred\", mode=\"train\")\n",
      "    }\n",
      "    network = fe.Network(ops=[\n",
      "        Scheduler(mixup_map),\n",
      "        ModelOp(inputs=\"x\", model=model, outputs=\"y_pred\"),\n",
      "        Scheduler(mixup_loss),\n",
      "        SparseCategoricalCrossentropy(y_true=\"y\", y_pred=\"y_pred\", mode=\"eval\")\n",
      "    ])\n",
      "\n",
      "    traces = [\n",
      "        Accuracy(true_key=\"y\", pred_key=\"y_pred\"),\n",
      "        ConfusionMatrix(true_key=\"y\", pred_key=\"y_pred\", num_classes=num_classes),\n",
      "        ModelSaver(model_name=\"LeNet\", save_dir=model_dir, save_best=True)\n",
      "    ]\n",
      "\n",
      "    estimator = fe.Estimator(network=network, pipeline=pipeline, epochs=epochs, traces=traces)\n",
      "    return estimator\n",
      "\n",
      "\n",
      "if __name__ == \"__main__\":\n",
      "    est = get_estimator()\n",
      "    est.fit()\n"
     ]
    }
   ],
   "source": [
    "!cat lenet_cifar10_mixup.py"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 1: Prepare training and evaluation dataset, create FastEstimator `Pipeline`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`Pipeline` can take both data in memory and data in disk. In this example, we are going to use data in memory by loading data with `tf.keras.datasets.cifar10`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train image shape is (50000, 32, 32, 3)\n",
      "train label shape is (50000, 1)\n",
      "eval image shape is (10000, 32, 32, 3)\n",
      "eval label shape is (10000, 1)\n"
     ]
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "\n",
    "(x_train, y_train), (x_eval, y_eval) = tf.keras.datasets.cifar10.load_data()\n",
    "print(\"train image shape is {}\".format(x_train.shape))\n",
    "print(\"train label shape is {}\".format(y_train.shape))\n",
    "print(\"eval image shape is {}\".format(x_eval.shape))\n",
    "print(\"eval label shape is {}\".format(y_eval.shape))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For in-memory data in `Pipeline`, the data format should be a nested dictionary like: {\"mode1\": {\"feature1\": numpy_array, \"feature2\": numpy_array, ...}, ...}. Each `mode` can be either `train` or `eval`, in our case, we have both `train` and `eval`.  `feature` is the feature name, in our case, we have `x` and `y`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = {\"train\": {\"x\": x_train, \"y\": y_train}, \"eval\": {\"x\": x_eval, \"y\": y_eval}}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we are ready to define `Pipeline`, we want to apply a `Minmax` online preprocessing to the image feature `x` for both training and evaluation:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import fastestimator as fe\n",
    "from fastestimator.pipeline.processing import Minmax\n",
    "\n",
    "pipeline = fe.Pipeline(batch_size=50, data=data, ops=Minmax(inputs=\"x\", outputs=\"x\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 2: Prepare model, create FastEstimator `Network`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, we have to define the network architecture in `tf.keras.Model` or `tf.keras.Sequential`, for a popular architecture like LeNet, FastEstimator has it implemented already in [fastestimator.architecture.lenet](https://github.com/fastestimator/fastestimator/blob/master/fastestimator/architecture/lenet.py).  After defining the architecture, users are expected to feed the architecture definition and its associated model name, optimizer and loss name (default to be 'loss') to `FEModel`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "from fastestimator.architecture import LeNet\n",
    "from fastestimator.network.model import FEModel\n",
    "\n",
    "model = FEModel(model_def=lambda: LeNet(input_shape=x_train.shape[1:], classes=10), model_name=\"LeNet\", optimizer=\"adam\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can now define a simple `Network`: given with a batch data with key `x` and `y`, we have to work our way to `loss` with series of operators.  `ModelOp` is an operator that contains a model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "from fastestimator.network.model import ModelOp\n",
    "from fastestimator.network.loss import SparseCategoricalCrossentropy\n",
    "\n",
    "simple_network = fe.Network(ops=[ModelOp(inputs=\"x\", model=model, outputs=\"y_pred\"), \n",
    "                                 SparseCategoricalCrossentropy(y_pred=\"y_pred\", y_true=\"y\", outputs=\"loss\")])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "One advantage of `FastEstimator`, though, is that it is easy to construct much more complicated graphs. In this example, we want to conduct training by [mixing up input images](https://arxiv.org/abs/1710.09412), since this has been shown to make neural networks more robust against adversarial attacks, as well as helping to prevent over-fitting. To achieve this in `FastEstimator`, we start by randomly pairing and linearly combining inputs, then feeding the mixed images to the `ModelOp` before computing the loss. Note that mixup is only performed during training (not evaluation), and so the mode on the mix-related operations is set to 'train'. We use schedulers to enable mixup only after the first epoch, since it takes quite a while to converge otherwise."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "from tensorflow.python.keras.losses import SparseCategoricalCrossentropy as KerasCrossentropy\n",
    "from fastestimator.pipeline.augmentation import MixUpBatch\n",
    "from fastestimator.network.loss import MixUpLoss\n",
    "from fastestimator.util.schedule import Scheduler\n",
    "\n",
    "pipeline2 = fe.Pipeline(batch_size=50, data=data, ops=Minmax(inputs=\"x\", outputs=\"x\"))\n",
    "model2 = FEModel(model_def=lambda: LeNet(input_shape=x_train.shape[1:], classes=10), model_name=\"LeNet\", optimizer=\"adam\")\n",
    "warmup = 1\n",
    "\n",
    "mixup_network = fe.Network(ops=[\n",
    "        Scheduler({warmup: MixUpBatch(inputs=\"x\", outputs=[\"x\", \"lambda\"], alpha=1, mode=\"train\")}),\n",
    "        ModelOp(inputs=\"x\", model=model2, outputs=\"y_pred\"),\n",
    "        Scheduler({0: SparseCategoricalCrossentropy(y_true=\"y\", y_pred=\"y_pred\", mode=\"train\"),\n",
    "                   warmup: MixUpLoss(KerasCrossentropy(), lam=\"lambda\", y_true=\"y\", y_pred=\"y_pred\", mode=\"train\")}),\n",
    "        SparseCategoricalCrossentropy(y_true=\"y\", y_pred=\"y_pred\", mode=\"eval\")\n",
    "    ])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 3: Configure training, create `Estimator`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "During the training loop, we want to: 1) measure accuracy for data data 2) save the model with lowest valdiation loss. The `Trace` class is used for anything related to the training loop, and we will need to import the `Accuracy` and `ModelSaver` traces."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "import tempfile\n",
    "import os\n",
    "from fastestimator.estimator.trace import Accuracy, ModelSaver\n",
    "\n",
    "simple_traces = [Accuracy(true_key=\"y\", pred_key=\"y_pred\", output_name='acc')]\n",
    "\n",
    "mixup_traces = [Accuracy(true_key=\"y\", pred_key=\"y_pred\", output_name='acc')]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can define the `Estimator` and specify the training configuation. We will create estimators for both the simple and adversarial networks in order to compare their performances."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "simple_estimator = fe.Estimator(network=simple_network, pipeline=pipeline, epochs=35, traces=simple_traces, log_steps=750)\n",
    "mixup_estimator = fe.Estimator(network=mixup_network, pipeline=pipeline2, epochs=35, traces=mixup_traces, log_steps=750)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 4: Training"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We'll start by training the regular network (takes about 20 minutes on a 2015 MacBookPro CPU - 2.5 GHz Intel Core i7). The network should attain a peak evaluation accuracy around 72%"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ______           __  ______     __  _                 __            \n",
      "   / ____/___ ______/ /_/ ____/____/ /_(_)___ ___  ____ _/ /_____  _____\n",
      "  / /_  / __ `/ ___/ __/ __/ / ___/ __/ / __ `__ \\/ __ `/ __/ __ \\/ ___/\n",
      " / __/ / /_/ (__  ) /_/ /___(__  ) /_/ / / / / / / /_/ / /_/ /_/ / /    \n",
      "/_/    \\__,_/____/\\__/_____/____/\\__/_/_/ /_/ /_/\\__,_/\\__/\\____/_/     \n",
      "                                                                        \n",
      "\n",
      "FastEstimator-Warn: No ModelSaver Trace detected. Models will not be saved.\n",
      "FastEstimator-Start: step: 0; LeNet_lr: 0.001; \n",
      "FastEstimator-Train: step: 0; loss: 2.331715; \n",
      "FastEstimator-Train: step: 750; loss: 1.4613332; examples/sec: 1959.19; \n",
      "FastEstimator-Eval: step: 1000; epoch: 0; loss: 1.2774726; min_loss: 1.2774726; since_best_loss: 0; acc: 0.5494; \n",
      "FastEstimator-Train: step: 1500; loss: 1.0069875; examples/sec: 1741.94; \n",
      "FastEstimator-Eval: step: 2000; epoch: 1; loss: 1.1048425; min_loss: 1.1048425; since_best_loss: 0; acc: 0.6104; \n",
      "FastEstimator-Train: step: 2250; loss: 1.0621296; examples/sec: 1569.21; \n",
      "FastEstimator-Eval: step: 3000; epoch: 2; loss: 1.0642631; min_loss: 1.0642631; since_best_loss: 0; acc: 0.629; \n",
      "FastEstimator-Train: step: 3000; loss: 0.9282726; examples/sec: 1656.14; \n",
      "FastEstimator-Train: step: 3750; loss: 0.7400702; examples/sec: 1716.0; \n",
      "FastEstimator-Eval: step: 4000; epoch: 3; loss: 0.9628639; min_loss: 0.9628639; since_best_loss: 0; acc: 0.6646; \n",
      "FastEstimator-Train: step: 4500; loss: 1.0233922; examples/sec: 1785.55; \n",
      "FastEstimator-Eval: step: 5000; epoch: 4; loss: 0.8989107; min_loss: 0.8989107; since_best_loss: 0; acc: 0.6877; \n",
      "FastEstimator-Train: step: 5250; loss: 0.6407582; examples/sec: 1726.28; \n",
      "FastEstimator-Eval: step: 6000; epoch: 5; loss: 0.8909989; min_loss: 0.8909989; since_best_loss: 0; acc: 0.6922; \n",
      "FastEstimator-Train: step: 6000; loss: 0.8722225; examples/sec: 1568.69; \n",
      "FastEstimator-Train: step: 6750; loss: 0.9620216; examples/sec: 1568.78; \n",
      "FastEstimator-Eval: step: 7000; epoch: 6; loss: 0.89311326; min_loss: 0.8909989; since_best_loss: 1; acc: 0.6921; \n",
      "FastEstimator-Train: step: 7500; loss: 0.75550026; examples/sec: 1447.76; \n",
      "FastEstimator-Eval: step: 8000; epoch: 7; loss: 0.8349639; min_loss: 0.8349639; since_best_loss: 0; acc: 0.7091; \n",
      "FastEstimator-Train: step: 8250; loss: 0.7132422; examples/sec: 1562.86; \n",
      "FastEstimator-Eval: step: 9000; epoch: 8; loss: 0.8533372; min_loss: 0.8349639; since_best_loss: 1; acc: 0.711; \n",
      "FastEstimator-Train: step: 9000; loss: 0.7781199; examples/sec: 1414.02; \n",
      "FastEstimator-Train: step: 9750; loss: 0.884112; examples/sec: 1528.63; \n",
      "FastEstimator-Eval: step: 10000; epoch: 9; loss: 0.88970655; min_loss: 0.8349639; since_best_loss: 2; acc: 0.7039; \n",
      "FastEstimator-Train: step: 10500; loss: 0.727613; examples/sec: 1551.64; \n",
      "FastEstimator-Eval: step: 11000; epoch: 10; loss: 0.8509058; min_loss: 0.8349639; since_best_loss: 3; acc: 0.7217; \n",
      "FastEstimator-Train: step: 11250; loss: 0.63292617; examples/sec: 1499.25; \n",
      "FastEstimator-Eval: step: 12000; epoch: 11; loss: 0.8842011; min_loss: 0.8349639; since_best_loss: 4; acc: 0.7115; \n",
      "FastEstimator-Train: step: 12000; loss: 0.41313928; examples/sec: 1350.88; \n",
      "FastEstimator-Train: step: 12750; loss: 0.61047447; examples/sec: 1469.66; \n",
      "FastEstimator-Eval: step: 13000; epoch: 12; loss: 0.8647006; min_loss: 0.8349639; since_best_loss: 5; acc: 0.7213; \n",
      "FastEstimator-Train: step: 13500; loss: 0.7467363; examples/sec: 1461.29; \n",
      "FastEstimator-Eval: step: 14000; epoch: 13; loss: 0.9206247; min_loss: 0.8349639; since_best_loss: 6; acc: 0.7048; \n",
      "FastEstimator-Train: step: 14250; loss: 0.6380059; examples/sec: 1306.6; \n",
      "FastEstimator-Eval: step: 15000; epoch: 14; loss: 0.9063304; min_loss: 0.8349639; since_best_loss: 7; acc: 0.7177; \n",
      "FastEstimator-Train: step: 15000; loss: 0.39659286; examples/sec: 1417.06; \n",
      "FastEstimator-Train: step: 15750; loss: 0.55478966; examples/sec: 1328.54; \n",
      "FastEstimator-Eval: step: 16000; epoch: 15; loss: 0.93593335; min_loss: 0.8349639; since_best_loss: 8; acc: 0.7194; \n",
      "FastEstimator-Train: step: 16500; loss: 0.5506267; examples/sec: 1484.73; \n",
      "FastEstimator-Eval: step: 17000; epoch: 16; loss: 1.0133876; min_loss: 0.8349639; since_best_loss: 9; acc: 0.694; \n",
      "FastEstimator-Train: step: 17250; loss: 0.44862288; examples/sec: 1488.35; \n",
      "FastEstimator-Eval: step: 18000; epoch: 17; loss: 1.0024047; min_loss: 0.8349639; since_best_loss: 10; acc: 0.7042; \n",
      "FastEstimator-Train: step: 18000; loss: 0.37044662; examples/sec: 1615.37; \n",
      "FastEstimator-Train: step: 18750; loss: 0.5664523; examples/sec: 1458.71; \n",
      "FastEstimator-Eval: step: 19000; epoch: 18; loss: 1.0099096; min_loss: 0.8349639; since_best_loss: 11; acc: 0.7126; \n",
      "FastEstimator-Train: step: 19500; loss: 0.4712916; examples/sec: 1439.24; \n",
      "FastEstimator-Eval: step: 20000; epoch: 19; loss: 1.0874232; min_loss: 0.8349639; since_best_loss: 12; acc: 0.7021; \n",
      "FastEstimator-Train: step: 20250; loss: 0.2522728; examples/sec: 1513.15; \n",
      "FastEstimator-Eval: step: 21000; epoch: 20; loss: 1.0883918; min_loss: 0.8349639; since_best_loss: 13; acc: 0.7045; \n",
      "FastEstimator-Train: step: 21000; loss: 0.32584956; examples/sec: 1312.09; \n",
      "FastEstimator-Train: step: 21750; loss: 0.36073315; examples/sec: 1539.58; \n",
      "FastEstimator-Eval: step: 22000; epoch: 21; loss: 1.1733301; min_loss: 0.8349639; since_best_loss: 14; acc: 0.7007; \n",
      "FastEstimator-Train: step: 22500; loss: 0.31950936; examples/sec: 1527.46; \n",
      "FastEstimator-Eval: step: 23000; epoch: 22; loss: 1.2329471; min_loss: 0.8349639; since_best_loss: 15; acc: 0.6954; \n",
      "FastEstimator-Train: step: 23250; loss: 0.20031738; examples/sec: 1542.69; \n",
      "FastEstimator-Eval: step: 24000; epoch: 23; loss: 1.2536111; min_loss: 0.8349639; since_best_loss: 16; acc: 0.6963; \n",
      "FastEstimator-Train: step: 24000; loss: 0.35041863; examples/sec: 1675.59; \n",
      "FastEstimator-Train: step: 24750; loss: 0.19467203; examples/sec: 1496.21; \n",
      "FastEstimator-Eval: step: 25000; epoch: 24; loss: 1.2932085; min_loss: 0.8349639; since_best_loss: 17; acc: 0.7018; \n",
      "FastEstimator-Train: step: 25500; loss: 0.30500555; examples/sec: 1512.29; \n",
      "FastEstimator-Eval: step: 26000; epoch: 25; loss: 1.3495258; min_loss: 0.8349639; since_best_loss: 18; acc: 0.6936; \n",
      "FastEstimator-Train: step: 26250; loss: 0.12196634; examples/sec: 1349.19; \n",
      "FastEstimator-Eval: step: 27000; epoch: 26; loss: 1.441781; min_loss: 0.8349639; since_best_loss: 19; acc: 0.6913; \n",
      "FastEstimator-Train: step: 27000; loss: 0.17332903; examples/sec: 1525.78; \n",
      "FastEstimator-Train: step: 27750; loss: 0.18337594; examples/sec: 1619.0; \n",
      "FastEstimator-Eval: step: 28000; epoch: 27; loss: 1.4789841; min_loss: 0.8349639; since_best_loss: 20; acc: 0.6976; \n",
      "FastEstimator-Train: step: 28500; loss: 0.2023769; examples/sec: 1562.2; \n",
      "FastEstimator-Eval: step: 29000; epoch: 28; loss: 1.4952649; min_loss: 0.8349639; since_best_loss: 21; acc: 0.6959; \n",
      "FastEstimator-Train: step: 29250; loss: 0.17000729; examples/sec: 1224.92; \n",
      "FastEstimator-Eval: step: 30000; epoch: 29; loss: 1.5622888; min_loss: 0.8349639; since_best_loss: 22; acc: 0.6981; \n",
      "FastEstimator-Train: step: 30000; loss: 0.17837387; examples/sec: 1292.76; \n",
      "FastEstimator-Train: step: 30750; loss: 0.3066153; examples/sec: 1371.19; \n",
      "FastEstimator-Eval: step: 31000; epoch: 30; loss: 1.6347879; min_loss: 0.8349639; since_best_loss: 23; acc: 0.6924; \n",
      "FastEstimator-Train: step: 31500; loss: 0.16399877; examples/sec: 1330.44; \n",
      "FastEstimator-Eval: step: 32000; epoch: 31; loss: 1.6906112; min_loss: 0.8349639; since_best_loss: 24; acc: 0.6907; \n",
      "FastEstimator-Train: step: 32250; loss: 0.071930796; examples/sec: 1411.48; \n",
      "FastEstimator-Eval: step: 33000; epoch: 32; loss: 1.7898657; min_loss: 0.8349639; since_best_loss: 25; acc: 0.6881; \n",
      "FastEstimator-Train: step: 33000; loss: 0.07546672; examples/sec: 1355.55; \n",
      "FastEstimator-Train: step: 33750; loss: 0.15083854; examples/sec: 1287.87; \n",
      "FastEstimator-Eval: step: 34000; epoch: 33; loss: 1.7661749; min_loss: 0.8349639; since_best_loss: 26; acc: 0.6926; \n",
      "FastEstimator-Train: step: 34500; loss: 0.09949369; examples/sec: 1140.92; \n",
      "FastEstimator-Eval: step: 35000; epoch: 34; loss: 1.8486111; min_loss: 0.8349639; since_best_loss: 27; acc: 0.6855; \n",
      "FastEstimator-Finish: step: 35000; total_time: 1239.61 sec; LeNet_lr: 0.001; \n"
     ]
    }
   ],
   "source": [
    "simple_summary = simple_estimator.fit(summary=\"simple\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next we train the network using mixup. This process requires more epochs to converge since the training process is more difficult, though should get to around 75% evaluation accuracy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ______           __  ______     __  _                 __            \n",
      "   / ____/___ ______/ /_/ ____/____/ /_(_)___ ___  ____ _/ /_____  _____\n",
      "  / /_  / __ `/ ___/ __/ __/ / ___/ __/ / __ `__ \\/ __ `/ __/ __ \\/ ___/\n",
      " / __/ / /_/ (__  ) /_/ /___(__  ) /_/ / / / / / / /_/ / /_/ /_/ / /    \n",
      "/_/    \\__,_/____/\\__/_____/____/\\__/_/_/ /_/ /_/\\__,_/\\__/\\____/_/     \n",
      "                                                                        \n",
      "\n",
      "FastEstimator-Warn: No ModelSaver Trace detected. Models will not be saved.\n",
      "FastEstimator-Start: step: 0; LeNet_lr: 0.001; \n",
      "FastEstimator-Train: step: 0; loss: 2.3050277; \n",
      "FastEstimator-Train: step: 750; loss: 1.2329942; examples/sec: 1373.03; \n",
      "FastEstimator-Eval: step: 1000; epoch: 0; loss: 1.2362754; min_loss: 1.2362754; since_best_loss: 0; acc: 0.56; \n",
      "FastEstimator-Train: step: 1500; loss: 1.5889217; examples/sec: 1168.11; \n",
      "FastEstimator-Eval: step: 2000; epoch: 1; loss: 1.1370281; min_loss: 1.1370281; since_best_loss: 0; acc: 0.61; \n",
      "FastEstimator-Train: step: 2250; loss: 1.7115589; examples/sec: 1234.72; \n",
      "FastEstimator-Eval: step: 3000; epoch: 2; loss: 1.1399623; min_loss: 1.1370281; since_best_loss: 1; acc: 0.6159; \n",
      "FastEstimator-Train: step: 3000; loss: 1.7995199; examples/sec: 1468.72; \n",
      "FastEstimator-Train: step: 3750; loss: 1.6051363; examples/sec: 1369.12; \n",
      "FastEstimator-Eval: step: 4000; epoch: 3; loss: 0.9902823; min_loss: 0.9902823; since_best_loss: 0; acc: 0.6673; \n",
      "FastEstimator-Train: step: 4500; loss: 1.6753731; examples/sec: 1481.96; \n",
      "FastEstimator-Eval: step: 5000; epoch: 4; loss: 0.97858477; min_loss: 0.97858477; since_best_loss: 0; acc: 0.6793; \n",
      "FastEstimator-Train: step: 5250; loss: 0.89845765; examples/sec: 1267.88; \n",
      "FastEstimator-Eval: step: 6000; epoch: 5; loss: 0.93976164; min_loss: 0.93976164; since_best_loss: 0; acc: 0.696; \n",
      "FastEstimator-Train: step: 6000; loss: 1.4075922; examples/sec: 1272.96; \n",
      "FastEstimator-Train: step: 6750; loss: 0.65945655; examples/sec: 1381.51; \n",
      "FastEstimator-Eval: step: 7000; epoch: 6; loss: 0.9643959; min_loss: 0.93976164; since_best_loss: 1; acc: 0.6733; \n",
      "FastEstimator-Train: step: 7500; loss: 1.5823562; examples/sec: 1489.68; \n",
      "FastEstimator-Eval: step: 8000; epoch: 7; loss: 0.91102815; min_loss: 0.91102815; since_best_loss: 0; acc: 0.7008; \n",
      "FastEstimator-Train: step: 8250; loss: 1.287049; examples/sec: 1438.67; \n",
      "FastEstimator-Eval: step: 9000; epoch: 8; loss: 0.8704463; min_loss: 0.8704463; since_best_loss: 0; acc: 0.7186; \n",
      "FastEstimator-Train: step: 9000; loss: 1.3481679; examples/sec: 1350.14; \n",
      "FastEstimator-Train: step: 9750; loss: 1.6758894; examples/sec: 1532.79; \n",
      "FastEstimator-Eval: step: 10000; epoch: 9; loss: 0.8930283; min_loss: 0.8704463; since_best_loss: 1; acc: 0.7062; \n",
      "FastEstimator-Train: step: 10500; loss: 1.0667714; examples/sec: 1590.89; \n",
      "FastEstimator-Eval: step: 11000; epoch: 10; loss: 0.90948486; min_loss: 0.8704463; since_best_loss: 2; acc: 0.6993; \n",
      "FastEstimator-Train: step: 11250; loss: 1.5658528; examples/sec: 1492.57; \n",
      "FastEstimator-Eval: step: 12000; epoch: 11; loss: 0.903228; min_loss: 0.8704463; since_best_loss: 3; acc: 0.7031; \n",
      "FastEstimator-Train: step: 12000; loss: 1.5563731; examples/sec: 1531.84; \n",
      "FastEstimator-Train: step: 12750; loss: 1.4091307; examples/sec: 1569.81; \n",
      "FastEstimator-Eval: step: 13000; epoch: 12; loss: 0.8647963; min_loss: 0.8647963; since_best_loss: 0; acc: 0.7134; \n",
      "FastEstimator-Train: step: 13500; loss: 1.3482661; examples/sec: 1441.95; \n",
      "FastEstimator-Eval: step: 14000; epoch: 13; loss: 0.8308042; min_loss: 0.8308042; since_best_loss: 0; acc: 0.7316; \n",
      "FastEstimator-Train: step: 14250; loss: 1.3974802; examples/sec: 1454.76; \n",
      "FastEstimator-Eval: step: 15000; epoch: 14; loss: 0.8170932; min_loss: 0.8170932; since_best_loss: 0; acc: 0.7401; \n",
      "FastEstimator-Train: step: 15000; loss: 1.7568474; examples/sec: 1115.59; \n",
      "FastEstimator-Train: step: 15750; loss: 1.3449237; examples/sec: 1130.62; \n",
      "FastEstimator-Eval: step: 16000; epoch: 15; loss: 0.8104291; min_loss: 0.8104291; since_best_loss: 0; acc: 0.7389; \n",
      "FastEstimator-Train: step: 16500; loss: 1.1720655; examples/sec: 1114.4; \n",
      "FastEstimator-Eval: step: 17000; epoch: 16; loss: 0.8699782; min_loss: 0.8104291; since_best_loss: 1; acc: 0.7159; \n",
      "FastEstimator-Train: step: 17250; loss: 1.665534; examples/sec: 1343.65; \n",
      "FastEstimator-Eval: step: 18000; epoch: 17; loss: 0.8421028; min_loss: 0.8104291; since_best_loss: 2; acc: 0.7266; \n",
      "FastEstimator-Train: step: 18000; loss: 1.4973474; examples/sec: 1473.67; \n",
      "FastEstimator-Train: step: 18750; loss: 1.5317241; examples/sec: 1532.47; \n",
      "FastEstimator-Eval: step: 19000; epoch: 18; loss: 0.8198788; min_loss: 0.8104291; since_best_loss: 3; acc: 0.7323; \n",
      "FastEstimator-Train: step: 19500; loss: 1.2788459; examples/sec: 1470.78; \n",
      "FastEstimator-Eval: step: 20000; epoch: 19; loss: 0.8278583; min_loss: 0.8104291; since_best_loss: 4; acc: 0.7348; \n",
      "FastEstimator-Train: step: 20250; loss: 1.4489079; examples/sec: 1562.45; \n",
      "FastEstimator-Eval: step: 21000; epoch: 20; loss: 0.80829793; min_loss: 0.80829793; since_best_loss: 0; acc: 0.7366; \n",
      "FastEstimator-Train: step: 21000; loss: 1.1787478; examples/sec: 1442.06; \n",
      "FastEstimator-Train: step: 21750; loss: 1.2706674; examples/sec: 1404.14; \n",
      "FastEstimator-Eval: step: 22000; epoch: 21; loss: 0.8009184; min_loss: 0.8009184; since_best_loss: 0; acc: 0.7384; \n",
      "FastEstimator-Train: step: 22500; loss: 1.3208407; examples/sec: 1375.65; \n",
      "FastEstimator-Eval: step: 23000; epoch: 22; loss: 0.84265536; min_loss: 0.8009184; since_best_loss: 1; acc: 0.7299; \n",
      "FastEstimator-Train: step: 23250; loss: 1.1396755; examples/sec: 1469.97; \n",
      "FastEstimator-Eval: step: 24000; epoch: 23; loss: 0.8309843; min_loss: 0.8009184; since_best_loss: 2; acc: 0.7342; \n",
      "FastEstimator-Train: step: 24000; loss: 0.90322864; examples/sec: 1468.02; \n",
      "FastEstimator-Train: step: 24750; loss: 1.5739613; examples/sec: 1523.72; \n",
      "FastEstimator-Eval: step: 25000; epoch: 24; loss: 0.8032286; min_loss: 0.8009184; since_best_loss: 3; acc: 0.7401; \n",
      "FastEstimator-Train: step: 25500; loss: 1.5887469; examples/sec: 1626.95; \n",
      "FastEstimator-Eval: step: 26000; epoch: 25; loss: 0.7872876; min_loss: 0.7872876; since_best_loss: 0; acc: 0.7522; \n",
      "FastEstimator-Train: step: 26250; loss: 0.9834486; examples/sec: 1598.45; \n",
      "FastEstimator-Eval: step: 27000; epoch: 26; loss: 0.82741946; min_loss: 0.7872876; since_best_loss: 1; acc: 0.7413; \n",
      "FastEstimator-Train: step: 27000; loss: 0.7272983; examples/sec: 1543.82; \n",
      "FastEstimator-Train: step: 27750; loss: 1.6221609; examples/sec: 1598.44; \n",
      "FastEstimator-Eval: step: 28000; epoch: 27; loss: 0.8151908; min_loss: 0.7872876; since_best_loss: 2; acc: 0.7396; \n",
      "FastEstimator-Train: step: 28500; loss: 1.4443974; examples/sec: 1546.31; \n",
      "FastEstimator-Eval: step: 29000; epoch: 28; loss: 0.8135513; min_loss: 0.7872876; since_best_loss: 3; acc: 0.7363; \n",
      "FastEstimator-Train: step: 29250; loss: 1.0464164; examples/sec: 1580.03; \n",
      "FastEstimator-Eval: step: 30000; epoch: 29; loss: 0.79337555; min_loss: 0.7872876; since_best_loss: 4; acc: 0.7483; \n",
      "FastEstimator-Train: step: 30000; loss: 1.2425506; examples/sec: 1564.66; \n",
      "FastEstimator-Train: step: 30750; loss: 1.5266876; examples/sec: 1579.66; \n",
      "FastEstimator-Eval: step: 31000; epoch: 30; loss: 0.78999907; min_loss: 0.7872876; since_best_loss: 5; acc: 0.7493; \n",
      "FastEstimator-Train: step: 31500; loss: 1.460784; examples/sec: 1572.32; \n",
      "FastEstimator-Eval: step: 32000; epoch: 31; loss: 0.7770506; min_loss: 0.7770506; since_best_loss: 0; acc: 0.7525; \n",
      "FastEstimator-Train: step: 32250; loss: 0.85922897; examples/sec: 1548.95; \n",
      "FastEstimator-Eval: step: 33000; epoch: 32; loss: 0.7902287; min_loss: 0.7770506; since_best_loss: 1; acc: 0.749; \n",
      "FastEstimator-Train: step: 33000; loss: 1.2443095; examples/sec: 1548.14; \n",
      "FastEstimator-Train: step: 33750; loss: 1.4547554; examples/sec: 1425.78; \n",
      "FastEstimator-Eval: step: 34000; epoch: 33; loss: 0.771873; min_loss: 0.771873; since_best_loss: 0; acc: 0.753; \n",
      "FastEstimator-Train: step: 34500; loss: 0.9054517; examples/sec: 1200.91; \n",
      "FastEstimator-Eval: step: 35000; epoch: 34; loss: 0.8120081; min_loss: 0.771873; since_best_loss: 1; acc: 0.7409; \n",
      "FastEstimator-Finish: step: 35000; total_time: 1287.34 sec; LeNet_lr: 0.001; \n"
     ]
    }
   ],
   "source": [
    "mixup_summary = mixup_estimator.fit(summary=\"mixup\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 5: Comparing Results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As the performance logs make clear, the mixup training method is extremely effective in combatting overfitting. Whereas the regular model begins to overfit around epoch 7, the network with mixup training continues to improve even after 35 epochs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x604.8 with 9 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from fastestimator.visualization.logs import visualize_logs\n",
    "\n",
    "visualize_logs([simple_summary, mixup_summary], ignore_metrics={\"LeNet_lr\"})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
