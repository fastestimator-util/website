{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# CIFAR10 Image Classification Using LeNet"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this tutorial, we are going to walk through the logic in `lenet_cifar10_adversarial.py` shown below and provide step-by-step instructions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "# Copyright 2019 The FastEstimator Authors. All Rights Reserved.\n",
      "#\n",
      "# Licensed under the Apache License, Version 2.0 (the \"License\");\n",
      "# you may not use this file except in compliance with the License.\n",
      "# You may obtain a copy of the License at\n",
      "#\n",
      "#     http://www.apache.org/licenses/LICENSE-2.0\n",
      "#\n",
      "# Unless required by applicable law or agreed to in writing, software\n",
      "# distributed under the License is distributed on an \"AS IS\" BASIS,\n",
      "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
      "# See the License for the specific language governing permissions and\n",
      "# limitations under the License.\n",
      "# ==============================================================================\n",
      "import tempfile\n",
      "\n",
      "import tensorflow as tf\n",
      "\n",
      "from fastestimator import Estimator, Network, Pipeline\n",
      "from fastestimator.architecture import LeNet\n",
      "from fastestimator.estimator.trace import Accuracy, ConfusionMatrix, ModelSaver\n",
      "from fastestimator.network.loss import SparseCategoricalCrossentropy\n",
      "from fastestimator.network.model import FEModel, ModelOp\n",
      "from fastestimator.pipeline.augmentation import AdversarialSample, Average\n",
      "from fastestimator.pipeline.processing import Minmax\n",
      "from fastestimator.util.schedule import Scheduler\n",
      "\n",
      "\n",
      "def get_estimator(epochs=10, batch_size=32, epsilon=0.01, warmup=0, model_dir=tempfile.mkdtemp()):\n",
      "    (x_train, y_train), (x_eval, y_eval) = tf.keras.datasets.cifar10.load_data()\n",
      "    data = {\"train\": {\"x\": x_train, \"y\": y_train}, \"eval\": {\"x\": x_eval, \"y\": y_eval}}\n",
      "    num_classes = 10\n",
      "\n",
      "    pipeline = Pipeline(batch_size=batch_size, data=data, ops=Minmax(inputs=\"x\", outputs=\"x\"))\n",
      "\n",
      "    model = FEModel(model_def=lambda: LeNet(input_shape=x_train.shape[1:], classes=num_classes),\n",
      "                    model_name=\"LeNet\",\n",
      "                    optimizer=\"adam\")\n",
      "\n",
      "    adv_img = {warmup: AdversarialSample(inputs=(\"loss\", \"x\"), outputs=\"x_adverse\", epsilon=epsilon, mode=\"train\")}\n",
      "    adv_eval = {warmup: ModelOp(inputs=\"x_adverse\", model=model, outputs=\"y_pred_adverse\", mode=\"train\")}\n",
      "    adv_loss = {\n",
      "        warmup: SparseCategoricalCrossentropy(y_true=\"y\", y_pred=\"y_pred_adverse\", outputs=\"adverse_loss\", mode=\"train\")\n",
      "    }\n",
      "    adv_avg = {warmup: Average(inputs=(\"loss\", \"adverse_loss\"), outputs=\"loss\", mode=\"train\")}\n",
      "\n",
      "    network = Network(ops=[\n",
      "        ModelOp(inputs=\"x\", model=model, outputs=\"y_pred\", track_input=True),\n",
      "        SparseCategoricalCrossentropy(y_true=\"y\", y_pred=\"y_pred\", outputs=\"loss\"),\n",
      "        Scheduler(adv_img),\n",
      "        Scheduler(adv_eval),\n",
      "        Scheduler(adv_loss),\n",
      "        Scheduler(adv_avg)\n",
      "    ])\n",
      "\n",
      "    traces = [\n",
      "        Accuracy(true_key=\"y\", pred_key=\"y_pred\"),\n",
      "        ConfusionMatrix(true_key=\"y\", pred_key=\"y_pred\", num_classes=num_classes),\n",
      "        ModelSaver(model_name=\"LeNet\", save_dir=model_dir, save_freq=2)\n",
      "    ]\n",
      "\n",
      "    estimator = Estimator(network=network, pipeline=pipeline, epochs=epochs, traces=traces)\n",
      "\n",
      "    return estimator\n",
      "\n",
      "\n",
      "if __name__ == \"__main__\":\n",
      "    est = get_estimator()\n",
      "    est.fit()\n"
     ]
    }
   ],
   "source": [
    "!cat lenet_cifar10_adversarial.py"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 1: Prepare training and evaluation dataset, create FastEstimator `Pipeline`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`Pipeline` can take both data in memory and data in disk. In this example, we are going to use data in memory by loading data with `tf.keras.datasets.cifar10`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train image shape is (50000, 32, 32, 3)\n",
      "train label shape is (50000, 1)\n",
      "eval image shape is (10000, 32, 32, 3)\n",
      "eval label shape is (10000, 1)\n"
     ]
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "\n",
    "(x_train, y_train), (x_eval, y_eval) = tf.keras.datasets.cifar10.load_data()\n",
    "print(\"train image shape is {}\".format(x_train.shape))\n",
    "print(\"train label shape is {}\".format(y_train.shape))\n",
    "print(\"eval image shape is {}\".format(x_eval.shape))\n",
    "print(\"eval label shape is {}\".format(y_eval.shape))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For in-memory data in `Pipeline`, the data format should be a nested dictionary like: {\"mode1\": {\"feature1\": numpy_array, \"feature2\": numpy_array, ...}, ...}. Each `mode` can be either `train` or `eval`, in our case, we have both `train` and `eval`.  `feature` is the feature name, in our case, we have `x` and `y`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = {\"train\": {\"x\": x_train, \"y\": y_train}, \"eval\": {\"x\": x_eval, \"y\": y_eval}}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we are ready to define `Pipeline`, we want to apply a `Minmax` online preprocessing to the image feature `x` for both training and evaluation:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import fastestimator as fe\n",
    "from fastestimator.pipeline.processing import Minmax\n",
    "\n",
    "pipeline = fe.Pipeline(batch_size=50, data=data, ops=Minmax(inputs=\"x\", outputs=\"x\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 2: Prepare model, create FastEstimator `Network`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, we have to define the network architecture in `tf.keras.Model` or `tf.keras.Sequential`, for a popular architecture like LeNet, FastEstimator has it implemented already in [fastestimator.architecture.lenet](https://github.com/fastestimator/fastestimator/blob/master/fastestimator/architecture/lenet.py).  After defining the architecture, users are expected to feed the architecture definition and its associated model name, optimizer and loss name (default to be 'loss') to `FEModel`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "from fastestimator.architecture import LeNet\n",
    "from fastestimator.network.model import FEModel\n",
    "\n",
    "model = FEModel(model_def=lambda: LeNet(input_shape=x_train.shape[1:], classes=10), model_name=\"LeNet\", optimizer=\"adam\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can now define a simple `Network`: given with a batch data with key `x` and `y`, we have to work our way to `loss` with series of operators.  `ModelOp` is an operator that contains a model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "from fastestimator.network.model import ModelOp\n",
    "from fastestimator.network.loss import SparseCategoricalCrossentropy\n",
    "\n",
    "simple_network = fe.Network(ops=[ModelOp(inputs=\"x\", model=model, outputs=\"y_pred\"), \n",
    "                                 SparseCategoricalCrossentropy(y_pred=\"y_pred\", y_true=\"y\", outputs=\"loss\")])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "One advantage of `FastEstimator`, though, is that it is easy to construct much more complicated graphs. In this example, we want to conduct training by generating adversarially perturbed images and training against them, since this has been shown to make neural networks more robust against future [attacks](https://arxiv.org/abs/1412.6572). To achieve this in `FastEstimator`, we start by running the input through the model op and computing loss as before, but this time the `ModelOp` has the track_input flag set to `True` in order to indicate that gradients should be computed with respect to the input image in addition to the model weights. The network then generates an adversarial sample image using the `AdversarialSample` augmentation module, and runs that image through the model. Finally, the model is trained using an average of the raw loss and adversarial loss. Note that the adversarial part of the process needs only be done during training (not evaluation) and so the `mode` of these final four operations is set to 'train'.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "from fastestimator.pipeline.augmentation import AdversarialSample, Average\n",
    "\n",
    "pipeline2 = fe.Pipeline(batch_size=50, data=data, ops=Minmax(inputs=\"x\", outputs=\"x\"))\n",
    "model2 = FEModel(model_def=lambda: LeNet(input_shape=x_train.shape[1:], classes=10), model_name=\"LeNet\", optimizer=\"adam\")\n",
    "\n",
    "adversarial_network = fe.Network(ops=[\n",
    "        ModelOp(inputs=\"x\", model=model2, outputs=\"y_pred\", track_input=True),\n",
    "        SparseCategoricalCrossentropy(y_true=\"y\", y_pred=\"y_pred\", outputs=\"loss\"),\n",
    "        AdversarialSample(inputs=(\"loss\", \"x\"), outputs=\"x_adverse\", epsilon=0.01, mode=\"train\"),\n",
    "        ModelOp(inputs=\"x_adverse\", model=model2, outputs=\"y_pred_adverse\", mode=\"train\"),\n",
    "        SparseCategoricalCrossentropy(y_true=\"y\", y_pred=\"y_pred_adverse\", outputs=\"adverse_loss\", mode=\"train\"),\n",
    "        Average(inputs=(\"loss\", \"adverse_loss\"), outputs=\"loss\", mode=\"train\")\n",
    "    ])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 3: Configure training, create `Estimator`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "During the training loop, we want to: 1) measure accuracy for data data 2) save the model with lowest valdiation loss. The `Trace` class is used for anything related to the training loop, and we will need to import the `Accuracy` and `ModelSaver` traces."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "import tempfile\n",
    "import os\n",
    "from fastestimator.estimator.trace import Accuracy, ModelSaver\n",
    "\n",
    "base_dir = tempfile.mkdtemp()\n",
    "simple_save_dir = os.path.join(base_dir, 'simple')\n",
    "adversarial_save_dir = os.path.join(base_dir, 'adverse')\n",
    "\n",
    "simple_traces = [Accuracy(true_key=\"y\", pred_key=\"y_pred\", output_name='acc'),\n",
    "                 ModelSaver(model_name=\"LeNet\", save_dir=simple_save_dir, save_best=True)]\n",
    "\n",
    "adversarial_traces = [Accuracy(true_key=\"y\", pred_key=\"y_pred\", output_name='acc'),\n",
    "                      ModelSaver(model_name=\"LeNet\", save_dir=adversarial_save_dir, save_best=True)]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can define the `Estimator` and specify the training configuation. We will create estimators for both the simple and adversarial networks in order to compare their performances."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "simple_estimator = fe.Estimator(network=simple_network, pipeline=pipeline, epochs=15, traces=simple_traces, log_steps=500)\n",
    "adversarial_estimator = fe.Estimator(network=adversarial_network, pipeline=pipeline2, epochs=15, traces=adversarial_traces, log_steps=500)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 4: Training"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We'll start by training the regular network (takes about 7.7 minutes on a 2015 MacBookPro CPU - 2.5 GHz Intel Core i7). The network should attain an evaluation accuracy around 71%"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ______           __  ______     __  _                 __            \n",
      "   / ____/___ ______/ /_/ ____/____/ /_(_)___ ___  ____ _/ /_____  _____\n",
      "  / /_  / __ `/ ___/ __/ __/ / ___/ __/ / __ `__ \\/ __ `/ __/ __ \\/ ___/\n",
      " / __/ / /_/ (__  ) /_/ /___(__  ) /_/ / / / / / / /_/ / /_/ /_/ / /    \n",
      "/_/    \\__,_/____/\\__/_____/____/\\__/_/_/ /_/ /_/\\__,_/\\__/\\____/_/     \n",
      "                                                                        \n",
      "\n",
      "FastEstimator-Start: step: 0; LeNet_lr: 0.001; \n",
      "FastEstimator-Train: step: 0; loss: 2.3124847; \n",
      "FastEstimator-Train: step: 500; loss: 1.3299917; examples/sec: 1847.16; \n",
      "FastEstimator-ModelSaver: Saving model to /var/folders/sg/pck0wj4d27j2rwzg88n70trj5ysk83/T/tmpx1ir1w6d/simple/LeNet_best_loss.h5\n",
      "FastEstimator-Eval: step: 1000; epoch: 0; loss: 1.2784046; min_loss: 1.2784046; since_best_loss: 0; acc: 0.5462; \n",
      "FastEstimator-Train: step: 1000; loss: 1.1689698; examples/sec: 1830.1; \n",
      "FastEstimator-Train: step: 1500; loss: 0.9811843; examples/sec: 1720.13; \n",
      "FastEstimator-ModelSaver: Saving model to /var/folders/sg/pck0wj4d27j2rwzg88n70trj5ysk83/T/tmpx1ir1w6d/simple/LeNet_best_loss.h5\n",
      "FastEstimator-Eval: step: 2000; epoch: 1; loss: 1.1417769; min_loss: 1.1417769; since_best_loss: 0; acc: 0.5909; \n",
      "FastEstimator-Train: step: 2000; loss: 1.0079716; examples/sec: 1698.99; \n",
      "FastEstimator-Train: step: 2500; loss: 1.0714738; examples/sec: 1750.12; \n",
      "FastEstimator-ModelSaver: Saving model to /var/folders/sg/pck0wj4d27j2rwzg88n70trj5ysk83/T/tmpx1ir1w6d/simple/LeNet_best_loss.h5\n",
      "FastEstimator-Eval: step: 3000; epoch: 2; loss: 0.99537677; min_loss: 0.99537677; since_best_loss: 0; acc: 0.6561; \n",
      "FastEstimator-Train: step: 3000; loss: 0.7733082; examples/sec: 1729.18; \n",
      "FastEstimator-Train: step: 3500; loss: 1.190587; examples/sec: 1673.79; \n",
      "FastEstimator-ModelSaver: Saving model to /var/folders/sg/pck0wj4d27j2rwzg88n70trj5ysk83/T/tmpx1ir1w6d/simple/LeNet_best_loss.h5\n",
      "FastEstimator-Eval: step: 4000; epoch: 3; loss: 0.91380256; min_loss: 0.91380256; since_best_loss: 0; acc: 0.685; \n",
      "FastEstimator-Train: step: 4000; loss: 0.9403234; examples/sec: 1684.85; \n",
      "FastEstimator-Train: step: 4500; loss: 0.62326366; examples/sec: 1706.17; \n",
      "FastEstimator-ModelSaver: Saving model to /var/folders/sg/pck0wj4d27j2rwzg88n70trj5ysk83/T/tmpx1ir1w6d/simple/LeNet_best_loss.h5\n",
      "FastEstimator-Eval: step: 5000; epoch: 4; loss: 0.86766493; min_loss: 0.86766493; since_best_loss: 0; acc: 0.7058; \n",
      "FastEstimator-Train: step: 5000; loss: 0.8455601; examples/sec: 1755.24; \n",
      "FastEstimator-Train: step: 5500; loss: 0.7533429; examples/sec: 1833.41; \n",
      "FastEstimator-ModelSaver: Saving model to /var/folders/sg/pck0wj4d27j2rwzg88n70trj5ysk83/T/tmpx1ir1w6d/simple/LeNet_best_loss.h5\n",
      "FastEstimator-Eval: step: 6000; epoch: 5; loss: 0.8614862; min_loss: 0.8614862; since_best_loss: 0; acc: 0.7006; \n",
      "FastEstimator-Train: step: 6000; loss: 0.7912862; examples/sec: 1781.59; \n",
      "FastEstimator-Train: step: 6500; loss: 0.6456658; examples/sec: 1811.63; \n",
      "FastEstimator-ModelSaver: Saving model to /var/folders/sg/pck0wj4d27j2rwzg88n70trj5ysk83/T/tmpx1ir1w6d/simple/LeNet_best_loss.h5\n",
      "FastEstimator-Eval: step: 7000; epoch: 6; loss: 0.832827; min_loss: 0.832827; since_best_loss: 0; acc: 0.7111; \n",
      "FastEstimator-Train: step: 7000; loss: 0.7045235; examples/sec: 1815.67; \n",
      "FastEstimator-Train: step: 7500; loss: 0.60166085; examples/sec: 1803.84; \n",
      "FastEstimator-ModelSaver: Saving model to /var/folders/sg/pck0wj4d27j2rwzg88n70trj5ysk83/T/tmpx1ir1w6d/simple/LeNet_best_loss.h5\n",
      "FastEstimator-Eval: step: 8000; epoch: 7; loss: 0.8273749; min_loss: 0.8273749; since_best_loss: 0; acc: 0.7172; \n",
      "FastEstimator-Train: step: 8000; loss: 0.5240156; examples/sec: 1816.28; \n",
      "FastEstimator-Train: step: 8500; loss: 0.81156284; examples/sec: 1831.59; \n",
      "FastEstimator-Eval: step: 9000; epoch: 8; loss: 0.86673; min_loss: 0.8273749; since_best_loss: 1; acc: 0.7035; \n",
      "FastEstimator-Train: step: 9000; loss: 0.47957656; examples/sec: 1774.34; \n",
      "FastEstimator-Train: step: 9500; loss: 0.669713; examples/sec: 1849.93; \n",
      "FastEstimator-Eval: step: 10000; epoch: 9; loss: 0.8331488; min_loss: 0.8273749; since_best_loss: 2; acc: 0.7181; \n",
      "FastEstimator-Train: step: 10000; loss: 0.55527467; examples/sec: 1816.82; \n",
      "FastEstimator-Train: step: 10500; loss: 0.3248125; examples/sec: 1795.44; \n",
      "FastEstimator-Eval: step: 11000; epoch: 10; loss: 0.84305024; min_loss: 0.8273749; since_best_loss: 3; acc: 0.7199; \n",
      "FastEstimator-Train: step: 11000; loss: 0.33691522; examples/sec: 1811.95; \n",
      "FastEstimator-Train: step: 11500; loss: 0.62278694; examples/sec: 1789.95; \n",
      "FastEstimator-Eval: step: 12000; epoch: 11; loss: 0.8414785; min_loss: 0.8273749; since_best_loss: 4; acc: 0.7229; \n",
      "FastEstimator-Train: step: 12000; loss: 0.34771734; examples/sec: 1720.8; \n",
      "FastEstimator-Train: step: 12500; loss: 0.55076885; examples/sec: 1802.76; \n",
      "FastEstimator-Eval: step: 13000; epoch: 12; loss: 0.8628442; min_loss: 0.8273749; since_best_loss: 5; acc: 0.7194; \n",
      "FastEstimator-Train: step: 13000; loss: 0.6016948; examples/sec: 1805.11; \n",
      "FastEstimator-Train: step: 13500; loss: 0.6511101; examples/sec: 1803.58; \n",
      "FastEstimator-Eval: step: 14000; epoch: 13; loss: 0.9127908; min_loss: 0.8273749; since_best_loss: 6; acc: 0.7141; \n",
      "FastEstimator-Train: step: 14000; loss: 0.3643375; examples/sec: 1809.73; \n",
      "FastEstimator-Train: step: 14500; loss: 0.3428252; examples/sec: 1804.71; \n",
      "FastEstimator-Eval: step: 15000; epoch: 14; loss: 0.93758285; min_loss: 0.8273749; since_best_loss: 7; acc: 0.7161; \n",
      "FastEstimator-Finish: step: 15000; total_time: 443.17 sec; LeNet_lr: 0.001; \n"
     ]
    }
   ],
   "source": [
    "simple_estimator.fit()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next we train the network adversarially. This process takes longer (about 17 minutes) since it requires two different gradient computations and model evaluations per forward step rather than one. It is also slower to converge since the training process is more difficult, though should also get to around 71% evaluation accuracy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    ______           __  ______     __  _                 __            \n",
      "   / ____/___ ______/ /_/ ____/____/ /_(_)___ ___  ____ _/ /_____  _____\n",
      "  / /_  / __ `/ ___/ __/ __/ / ___/ __/ / __ `__ \\/ __ `/ __/ __ \\/ ___/\n",
      " / __/ / /_/ (__  ) /_/ /___(__  ) /_/ / / / / / / /_/ / /_/ /_/ / /    \n",
      "/_/    \\__,_/____/\\__/_____/____/\\__/_/_/ /_/ /_/\\__,_/\\__/\\____/_/     \n",
      "                                                                        \n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: Logging before flag parsing goes to stderr.\n",
      "W0918 14:54:45.685590 4569220544 deprecation.py:323] From /Users/212582149/Development/Healthcare/FE/fastestimator/venv/lib/python3.6/site-packages/tensorflow/python/ops/math_grad.py:1220: add_dispatch_support.<locals>.wrapper (from tensorflow.python.ops.array_ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use tf.where in 2.0, which has the same broadcast rule as np.where\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "FastEstimator-Start: step: 0; LeNet_lr: 0.001; \n",
      "FastEstimator-Train: step: 0; loss: 2.3298383; \n",
      "FastEstimator-Train: step: 500; loss: 1.8669537; examples/sec: 738.15; \n",
      "FastEstimator-ModelSaver: Saving model to /var/folders/sg/pck0wj4d27j2rwzg88n70trj5ysk83/T/tmpx1ir1w6d/adverse/LeNet_best_loss.h5\n",
      "FastEstimator-Eval: step: 1000; epoch: 0; loss: 1.4251435; min_loss: 1.4251435; since_best_loss: 0; acc: 0.482; \n",
      "FastEstimator-Train: step: 1000; loss: 1.8473295; examples/sec: 744.19; \n",
      "FastEstimator-Train: step: 1500; loss: 1.313486; examples/sec: 749.07; \n",
      "FastEstimator-ModelSaver: Saving model to /var/folders/sg/pck0wj4d27j2rwzg88n70trj5ysk83/T/tmpx1ir1w6d/adverse/LeNet_best_loss.h5\n",
      "FastEstimator-Eval: step: 2000; epoch: 1; loss: 1.2645028; min_loss: 1.2645028; since_best_loss: 0; acc: 0.5524; \n",
      "FastEstimator-Train: step: 2000; loss: 1.3079686; examples/sec: 759.75; \n",
      "FastEstimator-Train: step: 2500; loss: 1.3571646; examples/sec: 763.29; \n",
      "FastEstimator-ModelSaver: Saving model to /var/folders/sg/pck0wj4d27j2rwzg88n70trj5ysk83/T/tmpx1ir1w6d/adverse/LeNet_best_loss.h5\n",
      "FastEstimator-Eval: step: 3000; epoch: 2; loss: 1.1651436; min_loss: 1.1651436; since_best_loss: 0; acc: 0.5905; \n",
      "FastEstimator-Train: step: 3000; loss: 1.2703502; examples/sec: 754.89; \n",
      "FastEstimator-Train: step: 3500; loss: 1.4007244; examples/sec: 733.63; \n",
      "FastEstimator-ModelSaver: Saving model to /var/folders/sg/pck0wj4d27j2rwzg88n70trj5ysk83/T/tmpx1ir1w6d/adverse/LeNet_best_loss.h5\n",
      "FastEstimator-Eval: step: 4000; epoch: 3; loss: 1.1271737; min_loss: 1.1271737; since_best_loss: 0; acc: 0.6068; \n",
      "FastEstimator-Train: step: 4000; loss: 1.2630974; examples/sec: 722.0; \n",
      "FastEstimator-Train: step: 4500; loss: 1.4327785; examples/sec: 766.81; \n",
      "FastEstimator-ModelSaver: Saving model to /var/folders/sg/pck0wj4d27j2rwzg88n70trj5ysk83/T/tmpx1ir1w6d/adverse/LeNet_best_loss.h5\n",
      "FastEstimator-Eval: step: 5000; epoch: 4; loss: 1.0583675; min_loss: 1.0583675; since_best_loss: 0; acc: 0.6394; \n",
      "FastEstimator-Train: step: 5000; loss: 1.3867052; examples/sec: 756.03; \n",
      "FastEstimator-Train: step: 5500; loss: 1.0347433; examples/sec: 766.97; \n",
      "FastEstimator-ModelSaver: Saving model to /var/folders/sg/pck0wj4d27j2rwzg88n70trj5ysk83/T/tmpx1ir1w6d/adverse/LeNet_best_loss.h5\n",
      "FastEstimator-Eval: step: 6000; epoch: 5; loss: 1.0550991; min_loss: 1.0550991; since_best_loss: 0; acc: 0.6393; \n",
      "FastEstimator-Train: step: 6000; loss: 1.1663153; examples/sec: 764.42; \n",
      "FastEstimator-Train: step: 6500; loss: 1.2889416; examples/sec: 760.0; \n",
      "FastEstimator-ModelSaver: Saving model to /var/folders/sg/pck0wj4d27j2rwzg88n70trj5ysk83/T/tmpx1ir1w6d/adverse/LeNet_best_loss.h5\n",
      "FastEstimator-Eval: step: 7000; epoch: 6; loss: 1.0088823; min_loss: 1.0088823; since_best_loss: 0; acc: 0.655; \n",
      "FastEstimator-Train: step: 7000; loss: 1.0789413; examples/sec: 775.44; \n",
      "FastEstimator-Train: step: 7500; loss: 1.1665716; examples/sec: 771.88; \n",
      "FastEstimator-ModelSaver: Saving model to /var/folders/sg/pck0wj4d27j2rwzg88n70trj5ysk83/T/tmpx1ir1w6d/adverse/LeNet_best_loss.h5\n",
      "FastEstimator-Eval: step: 8000; epoch: 7; loss: 0.97106534; min_loss: 0.97106534; since_best_loss: 0; acc: 0.6716; \n",
      "FastEstimator-Train: step: 8000; loss: 1.5145048; examples/sec: 762.8; \n",
      "FastEstimator-Train: step: 8500; loss: 1.1087632; examples/sec: 772.82; \n",
      "FastEstimator-ModelSaver: Saving model to /var/folders/sg/pck0wj4d27j2rwzg88n70trj5ysk83/T/tmpx1ir1w6d/adverse/LeNet_best_loss.h5\n",
      "FastEstimator-Eval: step: 9000; epoch: 8; loss: 0.933372; min_loss: 0.933372; since_best_loss: 0; acc: 0.6769; \n",
      "FastEstimator-Train: step: 9000; loss: 1.1353444; examples/sec: 767.31; \n",
      "FastEstimator-Train: step: 9500; loss: 1.1008227; examples/sec: 774.61; \n",
      "FastEstimator-ModelSaver: Saving model to /var/folders/sg/pck0wj4d27j2rwzg88n70trj5ysk83/T/tmpx1ir1w6d/adverse/LeNet_best_loss.h5\n",
      "FastEstimator-Eval: step: 10000; epoch: 9; loss: 0.9333347; min_loss: 0.9333347; since_best_loss: 0; acc: 0.6796; \n",
      "FastEstimator-Train: step: 10000; loss: 1.350434; examples/sec: 774.85; \n",
      "FastEstimator-Train: step: 10500; loss: 1.1387297; examples/sec: 759.93; \n",
      "FastEstimator-ModelSaver: Saving model to /var/folders/sg/pck0wj4d27j2rwzg88n70trj5ysk83/T/tmpx1ir1w6d/adverse/LeNet_best_loss.h5\n",
      "FastEstimator-Eval: step: 11000; epoch: 10; loss: 0.9186048; min_loss: 0.9186048; since_best_loss: 0; acc: 0.6813; \n",
      "FastEstimator-Train: step: 11000; loss: 0.95713496; examples/sec: 738.36; \n",
      "FastEstimator-Train: step: 11500; loss: 1.1092968; examples/sec: 724.17; \n",
      "FastEstimator-ModelSaver: Saving model to /var/folders/sg/pck0wj4d27j2rwzg88n70trj5ysk83/T/tmpx1ir1w6d/adverse/LeNet_best_loss.h5\n",
      "FastEstimator-Eval: step: 12000; epoch: 11; loss: 0.90238357; min_loss: 0.90238357; since_best_loss: 0; acc: 0.6892; \n",
      "FastEstimator-Train: step: 12000; loss: 0.76909673; examples/sec: 715.33; \n",
      "FastEstimator-Train: step: 12500; loss: 1.0057844; examples/sec: 703.6; \n",
      "FastEstimator-ModelSaver: Saving model to /var/folders/sg/pck0wj4d27j2rwzg88n70trj5ysk83/T/tmpx1ir1w6d/adverse/LeNet_best_loss.h5\n",
      "FastEstimator-Eval: step: 13000; epoch: 12; loss: 0.8966954; min_loss: 0.8966954; since_best_loss: 0; acc: 0.6912; \n",
      "FastEstimator-Train: step: 13000; loss: 0.9696936; examples/sec: 675.94; \n",
      "FastEstimator-Train: step: 13500; loss: 1.2691981; examples/sec: 722.76; \n",
      "FastEstimator-ModelSaver: Saving model to /var/folders/sg/pck0wj4d27j2rwzg88n70trj5ysk83/T/tmpx1ir1w6d/adverse/LeNet_best_loss.h5\n",
      "FastEstimator-Eval: step: 14000; epoch: 13; loss: 0.87242967; min_loss: 0.87242967; since_best_loss: 0; acc: 0.6991; \n",
      "FastEstimator-Train: step: 14000; loss: 0.79431325; examples/sec: 732.54; \n",
      "FastEstimator-Train: step: 14500; loss: 1.0098355; examples/sec: 723.51; \n",
      "FastEstimator-Eval: step: 15000; epoch: 14; loss: 0.88332766; min_loss: 0.87242967; since_best_loss: 1; acc: 0.701; \n",
      "FastEstimator-Finish: step: 15000; total_time: 1026.6 sec; LeNet_lr: 0.001; \n"
     ]
    }
   ],
   "source": [
    "adversarial_estimator.fit()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 5: Inferencing and Adversarial Attacks"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After training, the model is saved to a temporary folder. We can load the model from file and do inferencing on a sample image."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "simple_model_path = os.path.join(simple_save_dir, 'LeNet_best_loss.h5')\n",
    "simple_model = tf.keras.models.load_model(simple_model_path, compile=False)\n",
    "\n",
    "adversarial_model_path = os.path.join(adversarial_save_dir, 'LeNet_best_loss.h5')\n",
    "adversarial_model = tf.keras.models.load_model(adversarial_model_path, compile=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Lets consider a few images from the evaluation dataset and see how the networks respond to adversarial attacks"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True Labels:                [cat     , ship    , ship    , airplane, frog    , frog    , car     , frog    , cat     , car     ]\n",
      "Simple Model Predicts:      [cat     , ship    , ship    , airplane, frog    , frog    , car     , frog    , cat     , car     ] (71.7% accuracy over 10000 images)\n",
      "Adversarial Model Predicts: [cat     , ship    , ship    , airplane, frog    , frog    , car     , deer    , cat     , car     ] (69.9% accuracy over 10000 images)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1512x216 with 10 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from fastestimator.util.vis_util import show_image\n",
    "from fastestimator.pipeline.processing import Minmax\n",
    "\n",
    "minmax = Minmax()\n",
    "num_vis = 10\n",
    "num_samples = 10000\n",
    "\n",
    "fig, axis = plt.subplots(1, num_vis, figsize=(21, 3))\n",
    "sample_images = tf.stack([minmax.forward(tf.constant(x), {}) for x in x_eval[0:num_samples]])\n",
    "sample_labels = tf.constant(y_eval[0:num_samples])\n",
    "for idx in range(num_vis):\n",
    "    show_image(axis[idx], sample_images[idx])\n",
    "\n",
    "class_dictionary = {\n",
    "    0: \"airplane\", 1: \"car\", 2: \"bird\", 3: \"cat\", 4: \"deer\", 5: \"dog\", 6: \"frog\", 7: \"horse\", 8: \"ship\", 9: \"truck\"\n",
    "}\n",
    "\n",
    "print(\"True Labels:                [{}]\".format(\n",
    "    ', '.join(['{:<8}' for _ in range(num_vis)])).format(*[class_dictionary[x[0].numpy()] for x in sample_labels][0:num_vis]))\n",
    "simple_prediction_score = simple_model.predict(sample_images)\n",
    "simple_accuracy = 1.0 - np.sum(np.not_equal(np.argmax(simple_prediction_score, axis=1), tf.reshape(sample_labels, (num_samples,)))) / num_samples\n",
    "print(\"Simple Model Predicts:      [{}] ({:2.1%} accuracy over {} images)\".format(\n",
    "    ', '.join(['{:<8}' for _ in range(num_vis)]), simple_accuracy, num_samples).format(\n",
    "    *[class_dictionary[x] for x in np.argmax(simple_prediction_score, axis=1)][0:num_vis]))\n",
    "adversarial_prediction_score = adversarial_model.predict(sample_images)\n",
    "adversarial_accuracy = 1.0 - np.sum(np.not_equal(np.argmax(adversarial_prediction_score, axis=1), tf.reshape(sample_labels, (num_samples,)))) / num_samples\n",
    "print(\"Adversarial Model Predicts: [{}] ({:2.1%} accuracy over {} images)\".format(\n",
    "    ', '.join(['{:<8}' for _ in range(num_vis)]), adversarial_accuracy, num_samples).format(\n",
    "    *[class_dictionary[x] for x in np.argmax(adversarial_prediction_score, axis=1)][0:num_vis]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we can see, both the simple model and the one trained against adversarial samples correctly identify a majority of the evaluation images, with a population accuracy around 70% each. Now, to create the adversarial versions of the images, we'll simulate the adversarial augmentation object\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "def attack(images, model, ground_truth, epsilon):\n",
    "    loss_obj = tf.losses.SparseCategoricalCrossentropy(reduction='none')\n",
    "    with tf.GradientTape() as tape:\n",
    "        tape.watch(images)\n",
    "        pred = model(images, training=False)\n",
    "        loss = loss_obj(ground_truth, pred)\n",
    "    gradients = tape.gradient(loss, images)\n",
    "    adverse_images = tf.clip_by_value(images + epsilon * tf.sign(gradients),\n",
    "                                      tf.reduce_min(images),\n",
    "                                      tf.reduce_max(images))\n",
    "    return adverse_images"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First we will generate adversarial images by inspecting the gradients of the simple model, and see how well the two models can resist the attack"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True Labels:                [cat     , ship    , ship    , airplane, frog    , frog    , car     , frog    , cat     , car     ]\n",
      "Simple Model Predicts:      [frog    , ship    , truck   , ship    , deer    , frog    , airplane, deer    , bird    , truck   ] (31.9% accuracy over 10000 images)\n",
      "Adversarial Model Predicts: [cat     , ship    , ship    , airplane, deer    , frog    , truck   , deer    , cat     , car     ] (65.2% accuracy over 10000 images)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1512x216 with 10 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "adverse_images = attack(sample_images, simple_model, sample_labels, 0.01)\n",
    "\n",
    "fig, axis = plt.subplots(1, num_vis, figsize=(21, 3))\n",
    "for idx in range(num_vis):\n",
    "    show_image(axis[idx], adverse_images[idx])\n",
    "    \n",
    "print(\"True Labels:                [{}]\".format(\n",
    "    ', '.join(['{:<8}' for _ in range(num_vis)])).format(*[class_dictionary[x[0].numpy()] for x in sample_labels][0:num_vis]))\n",
    "simple_prediction_score = simple_model.predict(adverse_images)\n",
    "simple_accuracy_w = 1.0 - np.sum(np.not_equal(np.argmax(simple_prediction_score, axis=1), tf.reshape(sample_labels, (num_samples,)))) / num_samples\n",
    "print(\"Simple Model Predicts:      [{}] ({:2.1%} accuracy over {} images)\".format(\n",
    "    ', '.join(['{:<8}' for _ in range(num_vis)]), simple_accuracy_w, num_samples).format(\n",
    "    *[class_dictionary[x] for x in np.argmax(simple_prediction_score, axis=1)][0:num_vis]))\n",
    "adversarial_prediction_score = adversarial_model.predict(adverse_images)\n",
    "adversarial_accuracy_b = 1.0 - np.sum(np.not_equal(np.argmax(adversarial_prediction_score, axis=1), tf.reshape(sample_labels, (num_samples,)))) / num_samples\n",
    "print(\"Adversarial Model Predicts: [{}] ({:2.1%} accuracy over {} images)\".format(\n",
    "    ', '.join(['{:<8}' for _ in range(num_vis)]), adversarial_accuracy_b, num_samples).format(\n",
    "    *[class_dictionary[x] for x in np.argmax(adversarial_prediction_score, axis=1)][0:num_vis]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Even though these adversarially attacked images look basically the same as the original images, the accuracy of the traditionally trained model has dropped to 31.9%. The adversarially trained model also sees a reduction in accuracy, but only to 65.2%. It is, however, an incomplete/unfair comparison since the attack is white-box against the simple network but black-box against the adversarially trained network. Let's now generate adversarial images using the adversarially trainined network instead and see how well the models resist the attack"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True Labels:                [cat     , ship    , ship    , airplane, frog    , frog    , car     , frog    , cat     , car     ]\n",
      "Simple Model Predicts:      [cat     , ship    , ship    , airplane, deer    , frog    , car     , deer    , cat     , car     ] (61.6% accuracy over 10000 images)\n",
      "Adversarial Model Predicts: [cat     , ship    , airplane, airplane, deer    , frog    , truck   , deer    , cat     , truck   ] (49.1% accuracy over 10000 images)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1512x216 with 10 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "adverse_images = attack(sample_images, adversarial_model, sample_labels, 0.01)\n",
    "\n",
    "fig, axis = plt.subplots(1, num_vis, figsize=(21, 3))\n",
    "for idx in range(num_vis):\n",
    "    show_image(axis[idx], adverse_images[idx])\n",
    "    \n",
    "print(\"True Labels:                [{}]\".format(\n",
    "    ', '.join(['{:<8}' for _ in range(num_vis)])).format(*[class_dictionary[x[0].numpy()] for x in sample_labels][0:num_vis]))\n",
    "simple_prediction_score = simple_model.predict(adverse_images)\n",
    "simple_accuracy_b = 1.0 - np.sum(np.not_equal(np.argmax(simple_prediction_score, axis=1), tf.reshape(sample_labels, (num_samples,)))) / num_samples\n",
    "print(\"Simple Model Predicts:      [{}] ({:2.1%} accuracy over {} images)\".format(\n",
    "    ', '.join(['{:<8}' for _ in range(num_vis)]), simple_accuracy_b, num_samples).format(\n",
    "    *[class_dictionary[x] for x in np.argmax(simple_prediction_score, axis=1)][0:num_vis]))\n",
    "adversarial_prediction_score = adversarial_model.predict(adverse_images)\n",
    "adversarial_accuracy_w = 1.0 - np.sum(np.not_equal(np.argmax(adversarial_prediction_score, axis=1), tf.reshape(sample_labels, (num_samples,)))) / num_samples\n",
    "print(\"Adversarial Model Predicts: [{}] ({:2.1%} accuracy over {} images)\".format(\n",
    "    ', '.join(['{:<8}' for _ in range(num_vis)]), adversarial_accuracy_w, num_samples).format(\n",
    "    *[class_dictionary[x] for x in np.argmax(adversarial_prediction_score, axis=1)][0:num_vis]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Under this attack, the accuracy of the traditionally trained model has dropped to 61.6%. The adversarially trained model meanwhile has its performance reduced to 49.1%. While the raw adversarial accuracy here is now lower than the simple model, the performance loss is significantly less than it was for the simple model in the previous attack. To properly compare the models, the white-box and black-box attacks should be compared pairwise against one another:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "White box attack vs simple network:      -39.78% accuracy\n",
      "White box attack vs adversarial network: -22.67% accuracy\n",
      "\n",
      "Black box attack vs simple network:      -10.09% accuracy\n",
      "Black box attack vs adversarial network: -6.51% accuracy\n"
     ]
    }
   ],
   "source": [
    "print(\"White box attack vs simple network:      {:2.2%} accuracy\".format(simple_accuracy_w - simple_accuracy))\n",
    "print(\"White box attack vs adversarial network: {:2.2%} accuracy\".format(adversarial_accuracy_w - simple_accuracy))\n",
    "print()\n",
    "print(\"Black box attack vs simple network:      {:2.2%} accuracy\".format(simple_accuracy_b - simple_accuracy))\n",
    "print(\"Black box attack vs adversarial network: {:2.2%} accuracy\".format(adversarial_accuracy_b - simple_accuracy))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Adversarially attacking the simple network using white-box gradient analysis cost nearly 40 percentage points of accuracy. The same attack conducted against the adversarially trained network cost only around 23 percentage points. Likewise, a blackbox attack against the simple network cost 10 percentage points versus 6.5 against the adversarial network. This shows that the adversarial training process makes a network approximately twice as robust against future adversarial attacks. Whether such benefits are worth the increased training time would, of course, depend on the model deployment use-case. "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
